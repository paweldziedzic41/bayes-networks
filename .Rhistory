addWorksheet(wb, "ekstrema" + 1)
library(openxlsx)
addWorksheet(wb, "ekstrema" + 1)
wb <- createWorkbook()
addWorksheet(wb, "ekstrema" + 1)
set.seed(123)
punkty_startowe <- list()
# Utworzenie ramek do przechowywania informacji
wyniki_kara_zew <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric())
wyniki_kara_wew <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric())
x_y_pocztkowe <- data.frame(x = numeric(), y=numeric())
unikalne_ekstrema <- data.frame(x = numeric(), y = numeric(), fx = numeric() , ilosc = numeric())
lista_a <- c(3,2,1.9)
pocz <- 1
koniec <- 100
# Dla każdego a
for (j in 1:3){
a <- lista_a[j]
# Dla każdego punku startowego
for (i in pocz:koniec){
repeat {
x1 <- runif(1, min = -1.5, max = 1.5)
x2 <- runif(1, min = -1, max = 2)
if (g1(c(x1,x2)) <= 0 && g2(c(x1,x2)) <= 0 && g3(c(x1,x2) <= 0))
{
break
}
}
min_kara_zew <- external.penalty(funkcja_x,zew_kara,c(x1,x2),0.5,10^-10)
min_kara_wew <- internal.penalty(funkcja_x,wew_kara,c(x1,x2),0.5,10^-10)
wart_dla_kary_wew <- funkcja_x(min_kara_wew)
wart_dla_kary_zew <- funkcja_x(min_kara_zew)
# Dodanie wartości do ramek danych
x_y_pocztkowe[i,] <- c(x1,x2)
wyniki_kara_zew[i,] <- c(min_kara_zew[1],min_kara_zew[2],wart_dla_kary_zew, min_kara_zew[3])
wyniki_kara_wew[i,] <- c(min_kara_wew[1],min_kara_wew[2],wart_dla_kary_wew, min_kara_wew[3])
if ( round(wart_dla_kary_wew) %in% round(unikalne_ekstrema$fx) == FALSE){
unikalne_ekstrema <- rbind(unikalne_ekstrema,
data.frame(x = min_kara_wew[1], y = min_kara_wew[2], fx = wart_dla_kary_wew,ilosc = 1))
} else {
unikalne_ekstrema$ilosc[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] <-
unikalne_ekstrema$ilosc[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] + 1
}
}
wb <- createWorkbook()
addWorksheet(wb, "ekstrema")
writeData(wb, "ekstrema", unikalne_ekstrema)
pocz <- pocz + 100
koniec <- koniec + 100
}
saveWorkbook(wb, "C:/Users/gosc/Documents/Optymalizacja_nieliniowa/ekstrema.xlsx", overwrite = TRUE)
# Utworzenie ramek do przechowywania informacji
wyniki_kara_zew <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric())
wyniki_kara_wew <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric())
x_y_pocztkowe <- data.frame(x = numeric(), y=numeric())
lista_a <- c(3,2,1.9)
wb <- createWorkbook()
pocz <- 1
koniec <- 100
# Dla każdego a
for (j in 1:3){
a <- lista_a[j]
unikalne_ekstrema <- data.frame(x = numeric(), y = numeric(), fx = numeric() , ilosc = numeric())
for (i in pocz:koniec){
repeat {
x1 <- runif(1, min = -1.5, max = 1.5)
x2 <- runif(1, min = -1, max = 2)
if (g1(c(x1,x2)) <= 0 && g2(c(x1,x2)) <= 0 && g3(c(x1,x2) <= 0))
{
break
}
}
min_kara_zew <- external.penalty(funkcja_x,zew_kara,c(x1,x2),0.5,10^-10)
min_kara_wew <- internal.penalty(funkcja_x,wew_kara,c(x1,x2),0.5,10^-10)
wart_dla_kary_wew <- funkcja_x(min_kara_wew)
wart_dla_kary_zew <- funkcja_x(min_kara_zew)
# Dodanie wartości do ramek danych
x_y_pocztkowe[i,] <- c(x1,x2)
wyniki_kara_zew[i,] <- c(min_kara_zew[1],min_kara_zew[2],wart_dla_kary_zew, min_kara_zew[3])
wyniki_kara_wew[i,] <- c(min_kara_wew[1],min_kara_wew[2],wart_dla_kary_wew, min_kara_wew[3])
if ( round(wart_dla_kary_wew) %in% round(unikalne_ekstrema$fx) == FALSE){
unikalne_ekstrema <- rbind(unikalne_ekstrema,
data.frame(x = min_kara_wew[1], y = min_kara_wew[2], fx = wart_dla_kary_wew,ilosc = 1))
} else {
unikalne_ekstrema$ilosc[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] <-
unikalne_ekstrema$ilosc[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] + 1
}
}
if (koniec == 101){
addWorksheet(wb, "ekstrema1")
writeData(wb, "ekstrema1", unikalne_ekstrema)
} else if (koniec == 201) {
addWorksheet(wb, "ekstrema2")
writeData(wb, "ekstrema2", unikalne_ekstrema)
} else {
addWorksheet(wb, "ekstrema3")
writeData(wb, "ekstrema3", unikalne_ekstrema)
}
pocz <- pocz + 100
koniec <- koniec + 100
}
set.seed(123)
punkty_startowe <- list()
# Utworzenie ramek do przechowywania informacji
wyniki_kara_zew <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric())
wyniki_kara_wew <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric())
x_y_pocztkowe <- data.frame(x = numeric(), y=numeric())
lista_a <- c(3,2,1.9)
wb <- createWorkbook()
pocz <- 1
koniec <- 100
# Dla każdego a
for (j in 1:3){
a <- lista_a[j]
unikalne_ekstrema <- data.frame(x = numeric(), y = numeric(), fx = numeric() , ilosc = numeric())
for (i in pocz:koniec){
repeat {
x1 <- runif(1, min = -1.5, max = 1.5)
x2 <- runif(1, min = -1, max = 2)
if (g1(c(x1,x2)) <= 0 && g2(c(x1,x2)) <= 0 && g3(c(x1,x2) <= 0))
{
break
}
}
min_kara_zew <- external.penalty(funkcja_x,zew_kara,c(x1,x2),0.5,10^-10)
min_kara_wew <- internal.penalty(funkcja_x,wew_kara,c(x1,x2),0.5,10^-10)
wart_dla_kary_wew <- funkcja_x(min_kara_wew)
wart_dla_kary_zew <- funkcja_x(min_kara_zew)
# Dodanie wartości do ramek danych
x_y_pocztkowe[i,] <- c(x1,x2)
wyniki_kara_zew[i,] <- c(min_kara_zew[1],min_kara_zew[2],wart_dla_kary_zew, min_kara_zew[3])
wyniki_kara_wew[i,] <- c(min_kara_wew[1],min_kara_wew[2],wart_dla_kary_wew, min_kara_wew[3])
if ( round(wart_dla_kary_wew) %in% round(unikalne_ekstrema$fx) == FALSE){
unikalne_ekstrema <- rbind(unikalne_ekstrema,
data.frame(x = min_kara_wew[1], y = min_kara_wew[2], fx = wart_dla_kary_wew,ilosc = 1))
} else {
unikalne_ekstrema$ilosc[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] <-
unikalne_ekstrema$ilosc[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] + 1
}
}
if (pocz == 1){
addWorksheet(wb, "ekstrema1")
writeData(wb, "ekstrema1", unikalne_ekstrema)
} else if (pocz == 101) {
addWorksheet(wb, "ekstrema2")
writeData(wb, "ekstrema2", unikalne_ekstrema)
} else if (pocz == 201){
addWorksheet(wb, "ekstrema3")
writeData(wb, "ekstrema3", unikalne_ekstrema)
}
pocz <- pocz + 100
koniec <- koniec + 100
}
saveWorkbook(wb, "C:/Users/gosc/Documents/Optymalizacja_nieliniowa/ekstrema.xlsx", overwrite = TRUE)
set.seed(123)
punkty_startowe <- list()
# Utworzenie ramek do przechowywania informacji
wyniki_kara_zew <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric())
wyniki_kara_wew <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric())
x_y_pocztkowe <- data.frame(x = numeric(), y=numeric())
lista_a <- c(3,2,1.9)
wb <- createWorkbook()
pocz <- 1
koniec <- 100
# Dla każdego a
for (j in 1:3){
a <- lista_a[j]
unikalne_ekstrema <- data.frame(x = numeric(), y = numeric(), fx = numeric(), iteracje = numeric(), ilosc = numeric())
for (i in pocz:koniec){
repeat {
x1 <- runif(1, min = -1.5, max = 1.5)
x2 <- runif(1, min = -1, max = 2)
if (g1(c(x1,x2)) <= 0 && g2(c(x1,x2)) <= 0 && g3(c(x1,x2) <= 0))
{
break
}
}
min_kara_zew <- external.penalty(funkcja_x,zew_kara,c(x1,x2),0.5,10^-10)
min_kara_wew <- internal.penalty(funkcja_x,wew_kara,c(x1,x2),0.5,10^-10)
wart_dla_kary_wew <- funkcja_x(min_kara_wew)
wart_dla_kary_zew <- funkcja_x(min_kara_zew)
# Dodanie wartości do ramek danych
x_y_pocztkowe[i,] <- c(x1,x2)
wyniki_kara_zew[i,] <- c(min_kara_zew[1],min_kara_zew[2],wart_dla_kary_zew, min_kara_zew[3])
wyniki_kara_wew[i,] <- c(min_kara_wew[1],min_kara_wew[2],wart_dla_kary_wew, min_kara_wew[3])
if ( round(wart_dla_kary_wew) %in% round(unikalne_ekstrema$fx) == FALSE){
unikalne_ekstrema <- rbind(unikalne_ekstrema,
data.frame(x = min_kara_wew[1], y = min_kara_wew[2],
fx = wart_dla_kary_wew, iteracje = min_kara_wew[3] ,ilosc = 1))
} else {
unikalne_ekstrema$ilosc[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] <-
unikalne_ekstrema$ilosc[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] + 1
unikalne_ekstrema$iteracje[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] <-
unikalne_ekstrema$iteracje[round(unikalne_ekstrema$fx) == round(wart_dla_kary_wew)] + min_kara_wew[3]
}
}
if (pocz == 1){
addWorksheet(wb, "ekstrema1")
writeData(wb, "ekstrema1", unikalne_ekstrema)
} else if (pocz == 101) {
addWorksheet(wb, "ekstrema2")
writeData(wb, "ekstrema2", unikalne_ekstrema)
} else if (pocz == 201){
addWorksheet(wb, "ekstrema3")
writeData(wb, "ekstrema3", unikalne_ekstrema)
}
pocz <- pocz + 100
koniec <- koniec + 100
}
saveWorkbook(wb, "C:/Users/gosc/Documents/Optymalizacja_nieliniowa/ekstrema.xlsx", overwrite = TRUE)
saveWorkbook(wb, "C:/Users/gosc/Documents/Optymalizacja_nieliniowa/ekstrema.xlsx", overwrite = TRUE)
library(rgl)
# Definicje funkcji Rosenbrocka
funkcja <- function(x, y) {
(1 - x)^2 + 100 * (y - x^2)^2
}
# Definicje ograniczeń
g1 <- function(x, a){
x[1] + x[2] - a
}
g2 <- function(x){
(x[1] - 1)^3 - x[2] + 1/8
}
g3 <- function(x){
-x[1] - 1/2
}
# Zakresy zmiennych
x <- seq(-1.5, 1.5, length.out = 100)
y <- seq(-1, 2, length.out = 100)
z <- outer(x, y, funkcja)
# Wartość parametru a
a <- 2
# Tworzenie wykresu 3D
persp3d(x, y, z, col = 'lightblue', xlab = 'x', ylab = 'y', zlab = 'f(x,y)')
# Dodanie punktu minimum funkcji Rosenbrocka
points3d(1, 1, funkcja(1, 1), col = 'red', size = 5)
# Tworzenie ograniczeń g1(x) jako linii na wykresie 3D
contour3d(x, y, outer(x, y, function(x, y) g1(c(x, y), a)), col = 'blue')
# Tworzenie wykresu 3D
persp3d(x, y, z, col = 'lightblue', xlab = 'x', ylab = 'y', zlab = 'f(x,y)')
# Tworzenie ograniczeń g2(x) i g3(x) jako linii na wykresie 3D
contour3d(x, y, outer(x, y, g2), col = 'green')
contour3d(x, y, outer(x, y, g3), col = 'purple')
persp3d(x, y, z, col = 'lightblue', xlab = 'x', ylab = 'y', zlab = 'f(x,y)')
# Dodanie punktu minimum funkcji Rosenbrocka
points3d(1, 1, funkcja(1, 1), col = 'red', size = 5)
# Tworzenie ograniczeń g1(x) jako linii na wykresie 3D
contour3d(x, y, outer(x, y, function(x, y) g1(c(x, y), a)), col = 'blue')
# Definicje funkcji Rosenbrocka
funkcja <- function(x, y) {
(1 - x)^2 + 100 * (y - x^2)^2
}
# Definicje ograniczeń
g1 <- function(x, a){
x[1] + x[2] - a
}
g2 <- function(x){
(x[1] - 1)^3 - x[2] + 1/8
}
g3 <- function(x){
-x[1] - 1/2
}
# Zakresy zmiennych
x <- seq(-1.5, 1.5, length.out = 100)
y <- seq(-1, 2, length.out = 100)
z <- outer(x, y, funkcja)
# Wartość parametru a
a <- 2
# Tworzenie wykresu konturowego
filled.contour(x, y, z, color.palette = terrain.colors,
plot.title = title(main = "Kontur funkcji Rosenbrocka", xlab = "x", ylab = "y"),
key.title = title(main = "f(x,y)"))
# Dodanie punktu minimum funkcji Rosenbrocka
points(1, 1, pch = 19, col = 'red', cex = 2)
# Dodanie linii ograniczeń g1(x), g2(x) i g3(x)
contour(x, y, outer(x, y, function(x, y) g1(c(x, y), a)), col = 'blue', add = TRUE)
library(ggplot2)
# Definicja funkcji Rosenbrocka
funkcja <- function(x, y) {
(1 - x)^2 + 100 * (y - x^2)^2
}
# Tworzenie siatki wartości dla x i y
x <- seq(-1.5, 1.5, length.out = 100)
y <- seq(-1, 2, length.out = 100)
z <- outer(x, y, funkcja)
# Pobranie gradientu funkcji Rosenbrocka
gradient <- gradient(z)
library(ggplot2)
# Definicja funkcji Rosenbrocka
funkcja <- function(x, y) {
(1 - x)^2 + 100 * (y - x^2)^2
}
# Tworzenie siatki wartości dla x i y
x <- seq(-1.5, 1.5, length.out = 100)
y <- seq(-1, 2, length.out = 100)
z <- outer(x, y, funkcja)
# Pobranie gradientu funkcji Rosenbrocka
gradient <- gradient(z)
library(plotly)
# Definicja funkcji Rosenbrocka
funkcja <- function(x, y) {
(1 - x)^2 + 100 * (y - x^2)^2
}
# Tworzenie siatki wartości dla x i y
x <- seq(-1.5, 1.5, length.out = 100)
y <- seq(-1, 2, length.out = 100)
z <- outer(x, y, funkcja)
# Pobranie gradientu funkcji Rosenbrocka
gradient <- gradient(z)
library(plotly)
# Definicja funkcji Rosenbrocka
funkcja <- function(x, y) {
(1 - x)^2 + 100 * (y - x^2)^2
}
# Definicja pochodnych cząstkowych funkcji Rosenbrocka
partial_x <- function(x, y) {
-2 * (1 - x) - 400 * x * (y - x^2)
}
partial_y <- function(x, y) {
200 * (y - x^2)
}
# Tworzenie siatki wartości dla x i y
x <- seq(-1.5, 1.5, length.out = 100)
y <- seq(-1, 2, length.out = 100)
z <- outer(x, y, funkcja)
# Obliczanie gradientu funkcji Rosenbrocka
gradient_x <- outer(x, y, partial_x)
gradient_y <- outer(x, y, partial_y)
# Stworzenie ramki danych dla funkcji celu
df <- expand.grid(x = x, y = y)
df$z <- funkcja(df$x, df$y)
# Stworzenie ramki danych dla gradientu
df_gradient <- expand.grid(x = x, y = y)
df_gradient$dx <- as.vector(gradient_x)
df_gradient$dy <- as.vector(gradient_y)
# Tworzenie wykresu 3D funkcji Rosenbrocka
plot_ly(df, x = ~x, y = ~y, z = ~z, type = "surface") %>%
add_surface() %>%
add_markers(x = ~df$x, y = ~df$y, z = ~df$z,
marker = list(size = 3, color = 'red')) %>%
layout(title = "Funkcja Rosenbrocka w przestrzeni 3D",
scene = list(xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z')))
library(plotly)
# Definicja funkcji Rosenbrocka
funkcja <- function(x, y) {
(1 - x)^2 + 100 * (y - x^2)^2
}
# Definicja pochodnych cząstkowych funkcji Rosenbrocka
partial_x <- function(x, y) {
-2 * (1 - x) - 400 * x * (y - x^2)
}
partial_y <- function(x, y) {
200 * (y - x^2)
}
# Tworzenie siatki wartości dla x i y
x <- seq(-1.5, 1.5, length.out = 100)
y <- seq(-1, 2, length.out = 100)
# Obliczanie wartości funkcji Rosenbrocka
z <- outer(x, y, funkcja)
# Obliczanie gradientu funkcji Rosenbrocka
gradient_x <- outer(x, y, partial_x)
gradient_y <- outer(x, y, partial_y)
# Tworzenie ramki danych dla wykresu funkcji Rosenbrocka
df <- expand.grid(x = x, y = y)
df$z <- as.vector(z)
# Tworzenie ramki danych dla gradientu
df_gradient <- expand.grid(x = x, y = y)
df_gradient$dx <- as.vector(gradient_x)
df_gradient$dy <- as.vector(gradient_y)
# Tworzenie wykresu 3D funkcji Rosenbrocka
plot_ly(df, x = ~x, y = ~y, z = ~z, type = "surface") %>%
add_surface() %>%
add_markers(x = ~df$x, y = ~df$y, z = ~df$z,
marker = list(size = 3, color = 'red')) %>%
layout(title = "Funkcja Rosenbrocka w przestrzeni 3D",
scene = list(xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z')))
# Wizulizacja funkcji
x <- seq(-1.5, 1.5, length.out = 50)
y <- seq(-1, 2, length.out = 50)
z <- outer(x, y, funkcja)
# Tworzenie wykresu z plotly
plot_ly(x = ~x, y = ~y, z = ~z, type = "surface") %>%
layout(scene = list(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
zaxis = list(title = 'f(x, y)')))
(-0.174)*7.01^2+1.3*7.01+2.5
(-0.174)*3.505^2+1.3*3.505+2.5
(-0.174)*x^2+1.3*x+2.5
1.3^2-4*-0.174*2.5
sqrt(3.43)
x <- (sqrt(7)-1)/4
2*(cos(x))^2 * sqrt(7)*cos(x)+ (3/4)
x <- (sqrt(7)+1)/4
2*(cos(x))^2 * sqrt(7)*cos(x)+ (3/4)
x
y <- sqrt(2)/2
2*(x)^2 * sqrt(7)*x+ (3/4)
2*y^2 - 2*sqrt(2)*y+1
round(2*y^2 - 2*sqrt(2)*y+1)
x <- (sqrt(7)+1)/4
2*(x)^2 * sqrt(7)*x+ (3/4)
2*(x)^2 * sqrt(7)*x+ (3/4)
x <- (sqrt(7)+1)/4
2*(x)^2 * sqrt(7)*x+ (3/4)
x <- (sqrt(7)-1)/4
2*(x)^2 * sqrt(7)*x+ (3/4)
x
2*(x)^2
2*(x)^2 - sqrt(7)*x+ (3/4)
x <- (sqrt(7)+1)/4
2*(x)^2 - sqrt(7)*x+ (3/4)
x <- (sqrt(7)+1)/4
y <- (sqrt(7)+1)/2
(x-y)^2
x <- (sqrt(7)-1)/4
y <- (sqrt(7)+1)/4
(x-y)^2
(y-x)^2
(y-x)^2
pi
sin(150*pi/360)
sin(150/360*pi)
sin(150/360*pi) - cos(120/360*pi) - tan(135/360*pi)
2*0.9^2-24*0.9+7
2*0.9^2-24*0.9+7
(24+6*sqrt(2))/36
x=(24+6*sqrt(2))/36
18*x^2-24*x+7
x=(4+*sqrt(2))/6
x=(4+sqrt(2))/6
x
18*x^2-24*x+7
setwd("C:/Users/gosc/Documents/Niepewnosci_projekt")
?setwd
getwd()
?read.csv()
data <- read.csv("ds_salaries.csv",header = TRUE,sep = ",")
data
View(data)
data <- data[:-1]
data <- data[:,-1]
data <- data[,-1]
data
View(data)
length(data)
row.length
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
dim(data)
data$employment_type <- data$employment_type[
if( data$employment_type == "EN") {data$employment_type == "Entry-level"}]
data$employment_type[
if( data$employment_type == "EN")data$employment_type == "Entry-level"]
data$employment_type
data$employment_type[data$employment_type == "FT"]
data$employment_type[data$employment_type == "FT"]
data$experience_level[data$experience_level == "SE"]
data$experience_level[data$experience_level == "EN"]
data$experience_level[data$experience_level == "EN"]
data$experience_level[data$experience_level == "EN"]
data$experience_level[data$experience_level == "EN"] <- "Entry-Level"
View(data)
data$experience_level[data$experience_level == "EN"] <- "Junior"
data$experience_level[data$experience_level == "MI"] <- "Mid"
data$experience_level[data$experience_level == "SE"] <- "Senior"
data$experience_level[data$experience_level == "EX"] <- "Director"
View(data)
factor(data$employment_type)
levels(data$experience_level)
levels(data$employment_type)
distinct(data$employment_type)
unique(data$employment_type)
data$employment_type[data$employment_type == "FT"] <- "Full-time"
data$employment_type[data$employment_type == "FT"] <- "Part-time"
data$employment_type[data$employment_type == "FT"] <- "Contract"
data$employment_type[data$employment_type == "FT"] <- "Freelance"
unique(data$employment_type)
data$employment_type[data$employment_type == "FT"] <- "Full-time"
data$employment_type[data$employment_type == "PT"] <- "Part-time"
data$employment_type[data$employment_type == "CT"] <- "Contract"
data$employment_type[data$employment_type == "FL"] <- "Freelance"
unique(data$employment_type)
View(data)
unique(data$remote_ratio)
data$remote_ratio[data$remote_ratio == 0] <- "Office"
unique(data$remote_ratio)
data$remote_ratio <- char(data$remote_ratio)
unique(data$remote_ratio)
View(data)
data$remote_ratio <- str(data$remote_ratio)
unique(data$remote_ratio)
data <- read.csv("ds_salaries.csv",header = TRUE,sep = ",")
#
data <- data[,-1]
unique(data$experience_level)
data$experience_level[data$experience_level == "EN"] <- "Junior"
data$experience_level[data$experience_level == "MI"] <- "Mid"
data$experience_level[data$experience_level == "SE"] <- "Senior"
data$experience_level[data$experience_level == "EX"] <- "Director"
unique(data$employment_type)
data$employment_type[data$employment_type == "FT"] <- "Full-time"
data$employment_type[data$employment_type == "PT"] <- "Part-time"
data$employment_type[data$employment_type == "CT"] <- "Contract"
data$employment_type[data$employment_type == "FL"] <- "Freelance"
unique(data$remote_ratio)
data$remote_ratio <- str(data$remote_ratio)
unique(data$remote_ratio)
